const path = require('path');
const fs = require('fs');
const multer = require('multer');
const { Image , sequelize } = require('../../models');


const storage = multer.diskStorage({
    destination: (req, file, cb) => {
      cb(null, 'upload');
    },
    filename: (req, file, cb) => {
      const uniqueName = `${Date.now()}-${file.originalname}`;
      cb(null, uniqueName);
    }
  });
  const upload = multer({ storage }).array('image'); // ‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå key = images
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  exports.createImages = async (req, res) => {
    console.log('üì¶ Files received:', req.files);
  
    if (!req.files || req.files.length === 0) {
      return res.status(400).json({ message: 'No files were uploaded' });
    }
  
    const t = await sequelize.transaction();
    try {
      const savedImages = [];
  
      for (const file of req.files) {
        const imagePath = path.join('upload', path.basename(file.path)).replace(/\\/g, '/');
        console.log('üìÅ Saving image:', imagePath);
  
        const img = await Image.create({
          ref_type: 'gallery',
          image_path: imagePath,
          created_at: new Date(),
          updated_at: new Date()
        }, { transaction: t });
  
        savedImages.push(img);
      }
  
      await t.commit();
      res.status(201).json({ message: 'Images uploaded', Image: savedImages });
  
    } catch (err) {
      await t.rollback();
      console.error('‚ùå Error saving images:', err);
      res.status(500).json({ message: 'Failed to save images', error: err.message });
    }
  };
  

  exports.deleteImage = async (req, res) => {
    try {
      const { id } = req.params;
  
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ id ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const image = await Image.findByPk(id);
  
      if (!image) {
        return res.status(404).json({
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö'
        });
      }
  
      // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      await image.destroy();
  
      res.status(200).json({
        message: '‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
      });
    } catch (error) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:', error);
      res.status(500).json({
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
        error: error.message
      });
    }
  };
  